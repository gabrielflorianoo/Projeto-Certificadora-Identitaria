// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    STUDENT
    VOLUNTEER
    TEACHER
}

enum EnrollmentStatus {
    PENDING
    APPROVED
    REJECTED
    CANCELED
    ATTENDING
}

enum WorkshopModality {
    PRESENCIAL
    ONLINE
    HYBRID
}

enum AssessmentType {
    TEST
    ASSIGNMENT
    PARTICIPATION
    FINAL_EXAM
    OTHER
}

model User {
    id          Int       @id @default(autoincrement())
    name        String
    email       String    @unique
    password    String
    role        Role
    phone       String   
    dateOfBirth DateTime
    age         Int
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    enrollments   Enrollment[]
    taughtClasses Class[]      @relation("TaughtClasses") 
    attendances   Attendance[]
    grades        Grade[]
}

model Workshop {
    id              Int      @id @default(autoincrement())
    title           String
    description     String
    startDate       DateTime
    endDate         DateTime
    maxParticipants Int
    semester        String          
    location        String          
    modality        WorkshopModality? @default(PRESENCIAL) 
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt

    classes     Class[]
    enrollments Enrollment[]
    grades      Grade[]
}

model Enrollment {
    id         Int      @id @default(autoincrement())
    userId     Int
    workshopId Int
    status     EnrollmentStatus 
    date       DateTime         @default(now())
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @updatedAt

    user     User     @relation(fields: [userId], references: [id])
    workshop Workshop @relation(fields: [workshopId], references: [id])
    @@unique([userId, workshopId])
}

model Class {
    id         Int      @id @default(autoincrement())
    workshopId Int
    date       DateTime
    subject    String
    taughtById Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    workshop    Workshop     @relation(fields: [workshopId], references: [id])
    teacher     User         @relation("TaughtClasses", fields: [taughtById], references: [id])
    attendances Attendance[]
    grades      Grade[]
}

model Attendance {
    id        Int      @id @default(autoincrement())
    userId    Int
    classId   Int
    present   Boolean
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    student User  @relation(fields: [userId], references: [id])
    class   Class @relation(fields: [classId], references: [id])
}

model Grade {
    id             Int           @id @default(autoincrement())
    userId         Int
    classId        Int?
    workshopId     Int?
    grade          Float
    notes          String?
    assessmentType AssessmentType? 
    weight         Float?        
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt

    student  User      @relation(fields: [userId], references: [id])
    class    Class?    @relation(fields: [classId], references: [id])
    workshop Workshop? @relation(fields: [workshopId], references: [id])
}